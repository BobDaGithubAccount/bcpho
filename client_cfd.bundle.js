/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/client_cfd.ts":
/*!***************************!*\
  !*** ./src/client_cfd.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _fluid_simulator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fluid_simulator.js */ \"./src/fluid_simulator.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a, _b;\n\nlet animationFrameId = null;\nlet isRunning = false;\nlet telemetry = false;\nfunction startSimulation() {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield (0,_fluid_simulator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        const density = parseFloat(document.getElementById('challenge_cfd_density').value);\n        const viscosity = parseFloat(document.getElementById('challenge_cfd_viscosity').value);\n        const temperature = parseFloat(document.getElementById('challenge_cfd_temperature').value);\n        const pressure = parseFloat(document.getElementById('challenge_cfd_pressure').value);\n        const gravity = parseFloat(document.getElementById('challenge_cfd_gravity').value);\n        const timeStep = 0.01;\n        const particle = new _fluid_simulator_js__WEBPACK_IMPORTED_MODULE_0__.Particle(new _fluid_simulator_js__WEBPACK_IMPORTED_MODULE_0__.Vector2D(50, 50), new _fluid_simulator_js__WEBPACK_IMPORTED_MODULE_0__.Vector2D(10, 10), parseFloat(document.getElementById('challenge_cfd_mass').value));\n        const fluidSimulator = new _fluid_simulator_js__WEBPACK_IMPORTED_MODULE_0__.FluidSimulator(100, 100, timeStep, viscosity, density, temperature, pressure, gravity, particle);\n        addForce(fluidSimulator);\n        if (animationFrameId !== null) {\n            cancelAnimationFrame(animationFrameId);\n        }\n        isRunning = true;\n        animate(fluidSimulator);\n    });\n}\nfunction addForce(fluidSimulator) {\n    const forceX = parseFloat(document.getElementById('challenge8_force_x').value);\n    const forceY = parseFloat(document.getElementById('challenge8_force_y').value);\n    const forceMagnitudeX = parseFloat(document.getElementById('challenge8_force_magnitude_x').value);\n    const forceMagnitudeY = parseFloat(document.getElementById('challenge8_force_magnitude_y').value);\n    fluidSimulator.add_force(forceX, forceY, forceMagnitudeX, forceMagnitudeY);\n}\nfunction animate(fluidSimulator) {\n    fluidSimulator.step();\n    if (document.getElementById('challenge8_continuous_force').value === 'true') {\n        addForce(fluidSimulator);\n    }\n    drawData(fluidSimulator);\n    animationFrameId = requestAnimationFrame(() => animate(fluidSimulator));\n    telemetry = document.getElementById('challenge8_telemetry').value === 'true';\n    if (telemetry) {\n        document.getElementById('challenge8_logs').innerHTML = fluidSimulator.get_statistics();\n    }\n    return;\n}\nfunction drawData(fluidSimulator) {\n    var _a;\n    const canvas = document.getElementById('challenge8_canvas');\n    const ctx = canvas.getContext('2d');\n    if (!ctx)\n        return;\n    let renderValue = (_a = document.getElementById('challenge8_renderMode')) === null || _a === void 0 ? void 0 : _a.value;\n    fluidSimulator.set_rendering_mode(renderValue);\n    let renderMode = fluidSimulator.rendering_mode;\n    const simWidth = 100;\n    const simHeight = 100;\n    const canvasWidth = canvas.width;\n    const canvasHeight = canvas.height;\n    const cellSize = canvasWidth / simWidth;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    ctx.strokeStyle = 'red';\n    ctx.lineWidth = 1;\n    const dataJson = fluidSimulator.get_data();\n    const data2DArray = JSON.parse(dataJson);\n    if (renderMode === _fluid_simulator_js__WEBPACK_IMPORTED_MODULE_0__.RenderingMode.Velocity) {\n        for (let y = 0; y < simHeight; y++) {\n            for (let x = 0; x < simWidth; x++) {\n                const data = data2DArray[y][x];\n                const velocity = { x: data[0], y: data[1] };\n                const startX = x * cellSize;\n                const startY = y * cellSize;\n                const endX = startX + velocity.x * cellSize;\n                const endY = startY + velocity.y * cellSize;\n                ctx.beginPath();\n                ctx.moveTo(startX, startY);\n                ctx.lineTo(endX, endY);\n                ctx.stroke();\n                const angle = Math.atan2(velocity.y, velocity.x);\n                const arrowLength = 5;\n                ctx.beginPath();\n                ctx.moveTo(endX, endY);\n                ctx.lineTo(endX - arrowLength * Math.cos(angle - Math.PI / 6), endY - arrowLength * Math.sin(angle - Math.PI / 6));\n                ctx.moveTo(endX, endY);\n                ctx.lineTo(endX - arrowLength * Math.cos(angle + Math.PI / 6), endY - arrowLength * Math.sin(angle + Math.PI / 6));\n                ctx.stroke();\n            }\n        }\n    }\n    else if (renderMode === _fluid_simulator_js__WEBPACK_IMPORTED_MODULE_0__.RenderingMode.Density || renderMode === _fluid_simulator_js__WEBPACK_IMPORTED_MODULE_0__.RenderingMode.Pressure || renderMode === _fluid_simulator_js__WEBPACK_IMPORTED_MODULE_0__.RenderingMode.Temperature) {\n        let maxValue = -Infinity;\n        for (let y = 0; y < simHeight; y++) {\n            for (let x = 0; x < simWidth; x++) {\n                const data = data2DArray[y][x];\n                const value = data[0];\n                if (value > maxValue) {\n                    maxValue = value;\n                }\n            }\n        }\n        for (let y = 0; y < simHeight; y++) {\n            for (let x = 0; x < simWidth; x++) {\n                const data = data2DArray[y][x];\n                const value = data[0];\n                const normalizedValue = value / maxValue;\n                const colorValue = Math.floor(normalizedValue * 255);\n                const startX = x * cellSize;\n                const startY = y * cellSize;\n                const red = colorValue;\n                const green = colorValue;\n                const blue = colorValue;\n                ctx.fillStyle = `rgb(${red}, ${green}, ${blue})`;\n                ctx.fillRect(startX, startY, cellSize, cellSize);\n            }\n        }\n    }\n    const particle = fluidSimulator.particle;\n    const particleX = particle.position.x;\n    const particleY = particle.position.y;\n    const particleRadius = 5;\n    ctx.fillStyle = 'blue';\n    ctx.beginPath();\n    ctx.arc(particleX, particleY, particleRadius, 0, 2 * Math.PI);\n    ctx.fill();\n}\n(_a = document.getElementById('challenge_cfd_run_simulation')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', startSimulation);\n(_b = document.getElementById('challenge_cfd_stop_simulation')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', () => {\n    isRunning = false;\n    if (animationFrameId !== null) {\n        cancelAnimationFrame(animationFrameId);\n    }\n});\n\n\n//# sourceURL=webpack://bcpho/./src/client_cfd.ts?");

/***/ }),

/***/ "./src/fluid_simulator_bg.wasm":
/*!*************************************!*\
  !*** ./src/fluid_simulator_bg.wasm ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"cd5219ef2fd44ee370f9.wasm\";\n\n//# sourceURL=webpack://bcpho/./src/fluid_simulator_bg.wasm?");

/***/ }),

/***/ "./src/fluid_simulator.js":
/*!********************************!*\
  !*** ./src/fluid_simulator.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FluidSimulator: () => (/* binding */ FluidSimulator),\n/* harmony export */   Particle: () => (/* binding */ Particle),\n/* harmony export */   RenderingMode: () => (/* binding */ RenderingMode),\n/* harmony export */   Vector2D: () => (/* binding */ Vector2D),\n/* harmony export */   console_log: () => (/* binding */ console_log),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   initSync: () => (/* binding */ initSync)\n/* harmony export */ });\nlet wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n* @param {string} s\n*/\nfunction console_log(s) {\n    const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.console_log(ptr0, len0);\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet cachedFloat64Memory0 = null;\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0 === null || cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n\nfunction getArrayF64FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getFloat64Memory0().subarray(ptr / 8, ptr / 8 + len);\n}\n\nfunction passArrayF64ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 8, 8) >>> 0;\n    getFloat64Memory0().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n*/\nconst RenderingMode = Object.freeze({ Velocity:0,\"0\":\"Velocity\",Density:1,\"1\":\"Density\",Pressure:2,\"2\":\"Pressure\",Temperature:3,\"3\":\"Temperature\", });\n\nconst FluidSimulatorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_fluidsimulator_free(ptr >>> 0));\n/**\n*/\nclass FluidSimulator {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FluidSimulatorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_fluidsimulator_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get width() {\n        const ret = wasm.__wbg_get_fluidsimulator_width(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set width(arg0) {\n        wasm.__wbg_set_fluidsimulator_width(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get height() {\n        const ret = wasm.__wbg_get_fluidsimulator_height(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set height(arg0) {\n        wasm.__wbg_set_fluidsimulator_height(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get time_step() {\n        const ret = wasm.__wbg_get_fluidsimulator_time_step(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set time_step(arg0) {\n        wasm.__wbg_set_fluidsimulator_time_step(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get time() {\n        const ret = wasm.__wbg_get_fluidsimulator_time(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set time(arg0) {\n        wasm.__wbg_set_fluidsimulator_time(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get viscosity() {\n        const ret = wasm.__wbg_get_fluidsimulator_viscosity(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set viscosity(arg0) {\n        wasm.__wbg_set_fluidsimulator_viscosity(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get density() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_fluidsimulator_density(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayF64FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 8, 8);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Float64Array} arg0\n    */\n    set density(arg0) {\n        const ptr0 = passArrayF64ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_fluidsimulator_density(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get velocity_x() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_fluidsimulator_velocity_x(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayF64FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 8, 8);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Float64Array} arg0\n    */\n    set velocity_x(arg0) {\n        const ptr0 = passArrayF64ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_fluidsimulator_velocity_x(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get velocity_y() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_fluidsimulator_velocity_y(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayF64FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 8, 8);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Float64Array} arg0\n    */\n    set velocity_y(arg0) {\n        const ptr0 = passArrayF64ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_fluidsimulator_velocity_y(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get pressure() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_fluidsimulator_pressure(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayF64FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 8, 8);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Float64Array} arg0\n    */\n    set pressure(arg0) {\n        const ptr0 = passArrayF64ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_fluidsimulator_pressure(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get temperature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.__wbg_get_fluidsimulator_temperature(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayF64FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 8, 8);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Float64Array} arg0\n    */\n    set temperature(arg0) {\n        const ptr0 = passArrayF64ToWasm0(arg0, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_fluidsimulator_temperature(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {number}\n    */\n    get gravity() {\n        const ret = wasm.__wbg_get_fluidsimulator_gravity(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set gravity(arg0) {\n        wasm.__wbg_set_fluidsimulator_gravity(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @returns {Particle}\n    */\n    get particle() {\n        const ret = wasm.__wbg_get_fluidsimulator_particle(this.__wbg_ptr);\n        return Particle.__wrap(ret);\n    }\n    /**\n    * @param {Particle} arg0\n    */\n    set particle(arg0) {\n        _assertClass(arg0, Particle);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_fluidsimulator_particle(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * @returns {RenderingMode}\n    */\n    get rendering_mode() {\n        const ret = wasm.__wbg_get_fluidsimulator_rendering_mode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {RenderingMode} arg0\n    */\n    set rendering_mode(arg0) {\n        wasm.__wbg_set_fluidsimulator_rendering_mode(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @param {number} time_step\n    * @param {number} viscosity\n    * @param {number} initial_density\n    * @param {number} initial_temperature\n    * @param {number} initial_pressure\n    * @param {number} gravity\n    * @param {Particle} particle\n    */\n    constructor(width, height, time_step, viscosity, initial_density, initial_temperature, initial_pressure, gravity, particle) {\n        _assertClass(particle, Particle);\n        var ptr0 = particle.__destroy_into_raw();\n        const ret = wasm.fluidsimulator_new(width, height, time_step, viscosity, initial_density, initial_temperature, initial_pressure, gravity, ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @param {number} force_x\n    * @param {number} force_y\n    */\n    add_force(x, y, force_x, force_y) {\n        wasm.fluidsimulator_add_force(this.__wbg_ptr, x, y, force_x, force_y);\n    }\n    /**\n    */\n    step() {\n        wasm.fluidsimulator_step(this.__wbg_ptr);\n    }\n    /**\n    * @param {string} rendering_mode\n    */\n    set_rendering_mode(rendering_mode) {\n        const ptr0 = passStringToWasm0(rendering_mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.fluidsimulator_set_rendering_mode(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n    * @returns {any}\n    */\n    get_data() {\n        const ret = wasm.fluidsimulator_get_data(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get_statistics() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.fluidsimulator_get_statistics(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ParticleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_particle_free(ptr >>> 0));\n/**\n*/\nclass Particle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Particle.prototype);\n        obj.__wbg_ptr = ptr;\n        ParticleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ParticleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_particle_free(ptr);\n    }\n    /**\n    * @returns {Vector2D}\n    */\n    get position() {\n        const ret = wasm.__wbg_get_particle_position(this.__wbg_ptr);\n        return Vector2D.__wrap(ret);\n    }\n    /**\n    * @param {Vector2D} arg0\n    */\n    set position(arg0) {\n        _assertClass(arg0, Vector2D);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_particle_position(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * @returns {Vector2D}\n    */\n    get velocity() {\n        const ret = wasm.__wbg_get_particle_velocity(this.__wbg_ptr);\n        return Vector2D.__wrap(ret);\n    }\n    /**\n    * @param {Vector2D} arg0\n    */\n    set velocity(arg0) {\n        _assertClass(arg0, Vector2D);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_particle_velocity(this.__wbg_ptr, ptr0);\n    }\n    /**\n    * @returns {number}\n    */\n    get mass() {\n        const ret = wasm.__wbg_get_particle_mass(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set mass(arg0) {\n        wasm.__wbg_set_particle_mass(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @param {Vector2D} position\n    * @param {Vector2D} velocity\n    * @param {number} mass\n    */\n    constructor(position, velocity, mass) {\n        _assertClass(position, Vector2D);\n        var ptr0 = position.__destroy_into_raw();\n        _assertClass(velocity, Vector2D);\n        var ptr1 = velocity.__destroy_into_raw();\n        const ret = wasm.particle_new(ptr0, ptr1, mass);\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n}\n\nconst Vector2DFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_vector2d_free(ptr >>> 0));\n/**\n*/\nclass Vector2D {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Vector2D.prototype);\n        obj.__wbg_ptr = ptr;\n        Vector2DFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Vector2DFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vector2d_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get x() {\n        const ret = wasm.__wbg_get_fluidsimulator_time_step(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set x(arg0) {\n        wasm.__wbg_set_fluidsimulator_time_step(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get y() {\n        const ret = wasm.__wbg_get_fluidsimulator_time(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set y(arg0) {\n        wasm.__wbg_set_fluidsimulator_time(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    */\n    constructor(x, y) {\n        const ret = wasm.vector2d_new(x, y);\n        this.__wbg_ptr = ret >>> 0;\n        return this;\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_log_5bb5f88f245d7762 = function(arg0) {\n        console.log(getObject(arg0));\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, maybe_memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedFloat64Memory0 = null;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input) {\n    if (wasm !== undefined) return wasm;\n\n    if (typeof input === 'undefined') {\n        input = new URL(/* asset import */ __webpack_require__(/*! fluid_simulator_bg.wasm */ \"./src/fluid_simulator_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__wbg_init);\n\n\n//# sourceURL=webpack://bcpho/./src/fluid_simulator.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/dist/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"client_cfd": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/client_cfd.ts");
/******/ 	
/******/ })()
;